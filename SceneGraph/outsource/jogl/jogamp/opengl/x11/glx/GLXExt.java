/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Tue Mar 11 04:19:15 CET 2014 ----! */

package jogamp.opengl.x11.glx;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import jogamp.nativewindow.x11.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface GLXExt {

  /** Part of <code>GLX_3DFX_multisample</code> */
  public static final int GLX_SAMPLE_BUFFERS_3DFX = 0x8050;
  /** Part of <code>GLX_3DFX_multisample</code> */
  public static final int GLX_SAMPLES_3DFX = 0x8051;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_VENDOR_AMD = 0x1F00;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_RENDERER_STRING_AMD = 0x1F01;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_RAM_AMD = 0x21A3;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_CLOCK_AMD = 0x21A4;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_NUM_PIPES_AMD = 0x21A5;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_NUM_SIMD_AMD = 0x21A6;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_NUM_RB_AMD = 0x21A7;
  /** Part of <code>GLX_AMD_gpu_association</code> */
  public static final int GLX_GPU_NUM_SPI_AMD = 0x21A8;
  /** Part of <code>GLX_MESA_set_3dfx_mode</code> */
  public static final int GLX_3DFX_WINDOW_MODE_MESA = 0x1;
  /** Part of <code>GLX_MESA_set_3dfx_mode</code> */
  public static final int GLX_3DFX_FULLSCREEN_MODE_MESA = 0x2;
  /** Part of <code>GLX_NV_float_buffer</code> */
  public static final int GLX_FLOAT_COMPONENTS_NV = 0x20B0;
  /** Part of <code>GLX_NV_multisample_coverage</code> */
  public static final int GLX_COVERAGE_SAMPLES_NV = 100001;
  /** Part of <code>GLX_NV_multisample_coverage</code> */
  public static final int GLX_COLOR_SAMPLES_NV = 0x20B3;
  /** Part of <code>GLX_NV_present_video</code> */
  public static final int GLX_NUM_VIDEO_SLOTS_NV = 0x20F0;
  /** Part of <code>GLX_NV_video_capture</code> */
  public static final int GLX_DEVICE_ID_NV = 0x20CD;
  /** Part of <code>GLX_NV_video_capture</code> */
  public static final int GLX_UNIQUE_ID_NV = 0x20CE;
  /** Part of <code>GLX_NV_video_capture</code> */
  public static final int GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
  /** Part of <code>GLX_NV_video_output</code> */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;
  /** Part of <code>GLX_SGIS_blended_overlay</code> */
  public static final int GLX_BLENDED_RGBA_SGIS = 0x8025;
  /** Part of <code>GLX_SGIS_multisample</code> */
  public static final int GLX_SAMPLE_BUFFERS_SGIS = 100000;
  /** Part of <code>GLX_SGIS_multisample</code> */
  public static final int GLX_SAMPLES_SGIS = 100001;
  /** Part of <code>GLX_SGIS_shared_multisample</code> */
  public static final int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
  /** Part of <code>GLX_SGIS_shared_multisample</code> */
  public static final int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_WINDOW_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_PIXMAP_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RGBA_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_DRAWABLE_TYPE_SGIX = 0x8010;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RENDER_TYPE_SGIX = 0x8011;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_X_RENDERABLE_SGIX = 0x8012;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_FBCONFIG_ID_SGIX = 0x8013;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RGBA_TYPE_SGIX = 0x8014;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PBUFFER_BIT_SGIX = 0x00000004;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_LARGEST_PBUFFER_SGIX = 0x801C;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_WIDTH_SGIX = 0x801D;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_HEIGHT_SGIX = 0x801E;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_EVENT_MASK_SGIX = 0x801F;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_DAMAGED_SGIX = 0x8020;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_SAVED_SGIX = 0x8021;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_WINDOW_SGIX = 0x8022;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PBUFFER_SGIX = 0x8023;
  /** Part of <code>GLX_SGIX_video_resize</code> */
  public static final int GLX_SYNC_FRAME_SGIX = 0x00000000;
  /** Part of <code>GLX_SGIX_video_resize</code> */
  public static final int GLX_SYNC_SWAP_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_visual_select_group</code> */
  public static final int GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;

  /** Entry point to C language function: <code> GLvoid *  glXAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority); </code> <br>Part of <code>GLX_NV_vertex_array_range</code>   */
  public ByteBuffer glXAllocateMemoryNV(int size, float readfreq, float writefreq, float priority);

  /** Entry point to C language function: <code> int glXBindChannelToWindowSGIX(Display *  display, int screen, int channel, XID window); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXBindChannelToWindowSGIX(long display, int screen, int channel, long window);

  /** Entry point to C language function: <code> Bool glXBindSwapBarrierNV(Display *  dpy, GLuint group, GLuint barrier); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXBindSwapBarrierNV(long dpy, int group, int barrier);

  /** Entry point to C language function: <code> void glXBindSwapBarrierSGIX(Display *  dpy, XID drawable, int barrier); </code> <br>Part of <code>GLX_SGIX_swap_barrier</code>   */
  public void glXBindSwapBarrierSGIX(long dpy, long drawable, int barrier);

  /** Entry point to C language function: <code> int glXBindVideoCaptureDeviceNV(Display *  dpy, unsigned int video_capture_slot, XID device); </code> <br>Part of <code>GLX_NV_video_capture</code>   */
  public int glXBindVideoCaptureDeviceNV(long dpy, int video_capture_slot, long device);

  /** Entry point to C language function: <code> int glXBindVideoDeviceNV(Display *  dpy, unsigned int video_slot, unsigned int video_device, const int *  attrib_list); </code> <br>Part of <code>GLX_NV_present_video</code>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public int glXBindVideoDeviceNV(long dpy, int video_slot, int video_device, IntBuffer attrib_list);

  /** Entry point to C language function: <code> int glXBindVideoImageNV(Display *  dpy, GLXVideoDeviceNV VideoDevice, XID pbuf, int iVideoBuffer); </code> <br>Part of <code>GLX_NV_video_output</code>   */
  public int glXBindVideoImageNV(long dpy, int VideoDevice, long pbuf, int iVideoBuffer);

  /** Entry point to C language function: <code> int glXChannelRectSGIX(Display *  display, int screen, int channel, int x, int y, int w, int h); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXChannelRectSGIX(long display, int screen, int channel, int x, int y, int w, int h);

  /** Entry point to C language function: <code> int glXChannelRectSyncSGIX(Display *  display, int screen, int channel, GLenum synctype); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXChannelRectSyncSGIX(long display, int screen, int channel, int synctype);

  /** Entry point to C language function: <code> void glXCopyImageSubDataNV(Display *  dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth); </code> <br>Part of <code>GLX_NV_copy_image</code>   */
  public void glXCopyImageSubDataNV(long dpy, long srcCtx, int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, long dstCtx, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

  /** Entry point to C language function: <code> void glXCopySubBufferMESA(Display *  dpy, XID drawable, int x, int y, int width, int height); </code> <br>Part of <code>GLX_MESA_copy_sub_buffer</code>   */
  public void glXCopySubBufferMESA(long dpy, long drawable, int x, int y, int width, int height);

  /** Entry point to C language function: <code> GLXContext glXCreateContextAttribsARB(Display *  dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *  attrib_list); </code> <br>Part of <code>GLX_ARB_create_context</code>
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long glXCreateContextAttribsARB(long dpy, long config, long share_context, boolean direct, IntBuffer attrib_list);

  /** Entry point to C language function: <code> void glXCushionSGI(Display *  dpy, XID window, float cushion); </code> <br>Part of <code>GLX_SGI_cushion</code>   */
  public void glXCushionSGI(long dpy, long window, float cushion);

  /** Entry point to C language function: <code> XID *  glXEnumerateVideoCaptureDevicesNV(Display *  dpy, int screen, int *  nelements); </code> <br>Part of <code>GLX_NV_video_capture</code>
      @param nelements a direct only {@link java.nio.IntBuffer}   */
  public PointerBuffer glXEnumerateVideoCaptureDevicesNV(long dpy, int screen, IntBuffer nelements);

  /** Entry point to C language function: <code> unsigned int *  glXEnumerateVideoDevicesNV(Display *  dpy, int screen, int *  nelements); </code> <br>Part of <code>GLX_NV_present_video</code>
      @param nelements a direct only {@link java.nio.IntBuffer}   */
  public IntBuffer glXEnumerateVideoDevicesNV(long dpy, int screen, IntBuffer nelements);

  /** Entry point to C language function: <code> void glXFreeContextEXT(Display *  dpy, GLXContext context); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public void glXFreeContextEXT(long dpy, long context);

  /** Entry point to C language function: <code> void glXFreeMemoryNV(GLvoid *  pointer); </code> <br>Part of <code>GLX_NV_vertex_array_range</code>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public void glXFreeMemoryNV(Buffer pointer);

  /** Entry point to C language function: <code> unsigned int glXGetAGPOffsetMESA(const void *  pointer); </code> <br>Part of <code>GLX_MESA_agp_offset</code>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public int glXGetAGPOffsetMESA(Buffer pointer);

  /** Entry point to C language function: <code> XID glXGetContextIDEXT(GLXContext context); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXGetContextIDEXT(long context);

  /** Entry point to C language function: <code> Display *  glXGetCurrentDisplayEXT(void); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXGetCurrentDisplayEXT();

  /** Entry point to C language function: <code> XID glXGetCurrentReadDrawableSGI(void); </code> <br>Part of <code>GLX_SGI_make_current_read</code>   */
  public long glXGetCurrentReadDrawableSGI();

  /** Entry point to C language function: <code> Status glXGetTransparentIndexSUN(Display *  dpy, XID overlay, XID underlay, long *  pTransparentIndex); </code> <br>Part of <code>GLX_SUN_get_transparent_index</code>
      @param pTransparentIndex a direct only {@link java.nio.LongBuffer}   */
  public int glXGetTransparentIndexSUN(long dpy, long overlay, long underlay, LongBuffer pTransparentIndex);

  /** Entry point to C language function: <code> int glXGetVideoDeviceNV(Display *  dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *  pVideoDevice); </code> <br>Part of <code>GLX_NV_video_output</code>
      @param pVideoDevice a direct only {@link java.nio.IntBuffer}   */
  public int glXGetVideoDeviceNV(long dpy, int screen, int numVideoDevices, IntBuffer pVideoDevice);

  /** Entry point to C language function: <code> int glXGetVideoInfoNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *  pulCounterOutputPbuffer, unsigned long *  pulCounterOutputVideo); </code> <br>Part of <code>GLX_NV_video_output</code>
      @param pulCounterOutputPbuffer a direct only {@link java.nio.LongBuffer}
      @param pulCounterOutputVideo a direct only {@link java.nio.LongBuffer}   */
  public int glXGetVideoInfoNV(long dpy, int screen, int VideoDevice, LongBuffer pulCounterOutputPbuffer, LongBuffer pulCounterOutputVideo);

  /** Entry point to C language function: <code> int glXGetVideoSyncSGI(unsigned int *  count); </code> <br>Part of <code>GLX_SGI_video_sync</code>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public int glXGetVideoSyncSGI(IntBuffer count);

  /** Entry point to C language function: <code> GLXContext glXImportContextEXT(Display *  dpy, XID contextID); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXImportContextEXT(long dpy, long contextID);

  /** Entry point to C language function: <code> Bool glXJoinSwapGroupNV(Display *  dpy, XID drawable, GLuint group); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXJoinSwapGroupNV(long dpy, long drawable, int group);

  /** Entry point to C language function: <code> void glXJoinSwapGroupSGIX(Display *  dpy, XID drawable, XID member); </code> <br>Part of <code>GLX_SGIX_swap_group</code>   */
  public void glXJoinSwapGroupSGIX(long dpy, long drawable, long member);

  /** Entry point to C language function: <code> void glXLockVideoCaptureDeviceNV(Display *  dpy, XID device); </code> <br>Part of <code>GLX_NV_video_capture</code>   */
  public void glXLockVideoCaptureDeviceNV(long dpy, long device);

  /** Entry point to C language function: <code> Bool glXMakeCurrentReadSGI(Display *  dpy, XID draw, XID read, GLXContext ctx); </code> <br>Part of <code>GLX_SGI_make_current_read</code>   */
  public boolean glXMakeCurrentReadSGI(long dpy, long draw, long read, long ctx);

  /** Entry point to C language function: <code> int glXQueryChannelDeltasSGIX(Display *  display, int screen, int channel, int *  x, int *  y, int *  w, int *  h); </code> <br>Part of <code>GLX_SGIX_video_resize</code>
      @param x a direct only {@link java.nio.IntBuffer}
      @param y a direct only {@link java.nio.IntBuffer}
      @param w a direct only {@link java.nio.IntBuffer}
      @param h a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryChannelDeltasSGIX(long display, int screen, int channel, IntBuffer x, IntBuffer y, IntBuffer w, IntBuffer h);

  /** Entry point to C language function: <code> int glXQueryChannelRectSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh); </code> <br>Part of <code>GLX_SGIX_video_resize</code>
      @param dx a direct only {@link java.nio.IntBuffer}
      @param dy a direct only {@link java.nio.IntBuffer}
      @param dw a direct only {@link java.nio.IntBuffer}
      @param dh a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryChannelRectSGIX(long display, int screen, int channel, IntBuffer dx, IntBuffer dy, IntBuffer dw, IntBuffer dh);

  /** Entry point to C language function: <code> int glXQueryContextInfoEXT(Display *  dpy, GLXContext context, int attribute, int *  value); </code> <br>Part of <code>GLX_EXT_import_context</code>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryContextInfoEXT(long dpy, long context, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> Bool glXQueryFrameCountNV(Display *  dpy, int screen, GLuint *  count); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryFrameCountNV(long dpy, int screen, IntBuffer count);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapBarriersSGIX(Display *  dpy, int screen, int *  max); </code> <br>Part of <code>GLX_SGIX_swap_barrier</code>
      @param max a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapBarriersSGIX(long dpy, int screen, IntBuffer max);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapGroupsNV(Display *  dpy, int screen, GLuint *  maxGroups, GLuint *  maxBarriers); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param maxGroups a direct only {@link java.nio.IntBuffer}
      @param maxBarriers a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapGroupsNV(long dpy, int screen, IntBuffer maxGroups, IntBuffer maxBarriers);

  /** Entry point to C language function: <code> Bool glXQuerySwapGroupNV(Display *  dpy, XID drawable, GLuint *  group, GLuint *  barrier); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param group a direct only {@link java.nio.IntBuffer}
      @param barrier a direct only {@link java.nio.IntBuffer}   */
  public boolean glXQuerySwapGroupNV(long dpy, long drawable, IntBuffer group, IntBuffer barrier);

  /** Entry point to C language function: <code> int glXQueryVideoCaptureDeviceNV(Display *  dpy, XID device, int attribute, int *  value); </code> <br>Part of <code>GLX_NV_video_capture</code>
      @param value a direct only {@link java.nio.IntBuffer}   */
  public int glXQueryVideoCaptureDeviceNV(long dpy, long device, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> Bool glXReleaseBuffersMESA(Display *  dpy, XID drawable); </code> <br>Part of <code>GLX_MESA_release_buffers</code>   */
  public boolean glXReleaseBuffersMESA(long dpy, long drawable);

  /** Entry point to C language function: <code> void glXReleaseVideoCaptureDeviceNV(Display *  dpy, XID device); </code> <br>Part of <code>GLX_NV_video_capture</code>   */
  public void glXReleaseVideoCaptureDeviceNV(long dpy, long device);

  /** Entry point to C language function: <code> int glXReleaseVideoDeviceNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice); </code> <br>Part of <code>GLX_NV_video_output</code>   */
  public int glXReleaseVideoDeviceNV(long dpy, int screen, int VideoDevice);

  /** Entry point to C language function: <code> int glXReleaseVideoImageNV(Display *  dpy, XID pbuf); </code> <br>Part of <code>GLX_NV_video_output</code>   */
  public int glXReleaseVideoImageNV(long dpy, long pbuf);

  /** Entry point to C language function: <code> Bool glXResetFrameCountNV(Display *  dpy, int screen); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXResetFrameCountNV(long dpy, int screen);

  /** Entry point to C language function: <code> int glXSendPbufferToVideoNV(Display *  dpy, XID pbuf, int iBufferType, unsigned long *  pulCounterPbuffer, GLboolean bBlock); </code> <br>Part of <code>GLX_NV_video_output</code>
      @param pulCounterPbuffer a direct only {@link java.nio.LongBuffer}   */
  public int glXSendPbufferToVideoNV(long dpy, long pbuf, int iBufferType, LongBuffer pulCounterPbuffer, boolean bBlock);

  /** Entry point to C language function: <code> Bool glXSet3DfxModeMESA(int mode); </code> <br>Part of <code>GLX_MESA_set_3dfx_mode</code>   */
  public boolean glXSet3DfxModeMESA(int mode);

  /** Entry point to C language function: <code> int glXSwapIntervalSGI(int interval); </code> <br>Part of <code>GLX_SGI_swap_control</code>   */
  public int glXSwapIntervalSGI(int interval);

  /** Entry point to C language function: <code> int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *  count); </code> <br>Part of <code>GLX_SGI_video_sync</code>
      @param count a direct only {@link java.nio.IntBuffer}   */
  public int glXWaitVideoSyncSGI(int divisor, int remainder, IntBuffer count);


  // --- Begin CustomJavaCode .cfg declarations
      public boolean isFunctionAvailable(String glFunctionName);
      public boolean isExtensionAvailable(String glExtensionName);
  // ---- End CustomJavaCode .cfg declarations

} // end of class GLXExt
