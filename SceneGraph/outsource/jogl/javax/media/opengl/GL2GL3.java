/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Tue Mar 11 04:17:33 CET 2014 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import java.io.PrintStream;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p> 
  * Interface containing the common subset of core GL3 (OpenGL 3.1+) and GL2,
  * also known as the OpenGL 3.0 forward compatible, non deprecated subset.<br/>
  * This interface reflects only the programmable shader functionality of desktop OpenGL<br/>
  * </p>
  */
public interface GL2GL3 extends GL2ES3{

  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLE = 0x140A;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_QUADS = 0x0007;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_RANGE = 0x0B12;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_RANGE = 0x0B22;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT = 0x1B00;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE = 0x1B01;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_FILL = 0x1B02;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_MODE = 0x0B40;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH = 0x0B41;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_POINT = 0x2A01;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_LINE = 0x2A02;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_LEFT = 0x0406;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_RIGHT = 0x0407;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_LEFT = 0x0400;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_RIGHT = 0x0401;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_LEFT = 0x0402;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_RIGHT = 0x0403;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_DRAW_BUFFER = 0x0C01;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLEBUFFER = 0x0C32;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_STEREO = 0x0C33;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH_HINT = 0x0C53;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_LSB_FIRST = 0x0D01;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SWAP_BYTES = 0x0D00;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_LSB_FIRST = 0x0CF1;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_SWAP_BYTES = 0x0CF0;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_1D = 0x0DE0;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_WIDTH = 0x1000;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_HEIGHT = 0x1001;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_RED_SIZE = 0x805C;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GREEN_SIZE = 0x805D;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BLUE_SIZE = 0x805E;
  /** Part of <code>GL_VERSION_1_1</code>, <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_ALPHA_SIZE = 0x805F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_1D = 0x8063;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_2D = 0x8064;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_BINDING_1D = 0x8068;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_R3_G3_B2 = 0x2A10;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB4 = 0x804F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB5 = 0x8050;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB12 = 0x8053;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB16 = 0x8054;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA2 = 0x8055;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA12 = 0x805A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA16 = 0x805B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_SKIP_IMAGES = 0x806B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_IMAGE_HEIGHT = 0x806C;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PROXY_TEXTURE_3D = 0x8070;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_DEPTH = 0x8071;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_BGR = 0x80E0;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGB = 0x84ED;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGBA = 0x84EE;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED = 0x86A1;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_CLAMP_TO_BORDER = 0x812D;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_DEPTH_SIZE = 0x884A;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_QUERY_COUNTER_BITS = 0x8864;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_ONLY = 0x88B8;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_WRITE = 0x88BA;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_SAMPLES_PASSED = 0x8914;
  /** Part of <code>GL_VERSION_1_5</code>, <code>GL_VERSION_ES_1_0</code> */
  public static final int GL_SRC1_ALPHA = 0x8589;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VARYING_FLOATS = 0x8B4B;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D = 0x8B5D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D_SHADOW = 0x8B61;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_LOWER_LEFT = 0x8CA1;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_UPPER_LEFT = 0x8CA2;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB = 0x8C48;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE0 = 0x3000;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE1 = 0x3001;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE2 = 0x3002;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE3 = 0x3003;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE4 = 0x3004;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE5 = 0x3005;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE6 = 0x3006;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE7 = 0x3007;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_CLIP_DISTANCES = 0x0D32;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAGS = 0x821E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RED = 0x8225;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RG = 0x8226;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_CLAMP_READ_COLOR = 0x891C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_FIXED_ONLY = 0x891D;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_1D_ARRAY = 0x8C18;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_shared_exponent</code> */
  public static final int GL_TEXTURE_SHARED_SIZE = 0x8C3F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_PRIMITIVES_GENERATED = 0x8C87;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_GREEN_INTEGER = 0x8D95;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BLUE_INTEGER = 0x8D96;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BGR_INTEGER = 0x8D9A;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BGRA_INTEGER = 0x8D9B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_1D_ARRAY = 0x8DC0;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_1D = 0x8DC9;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_WAIT = 0x8E13;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_NO_WAIT = 0x8E14;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_BY_REGION_WAIT = 0x8E15;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_EXT_packed_depth_stencil</code> */
  public static final int GL_TEXTURE_STENCIL_SIZE = 0x88F1;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_RED_TYPE = 0x8C10;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_GREEN_TYPE = 0x8C11;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_BLUE_TYPE = 0x8C12;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_ALPHA_TYPE = 0x8C13;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_DEPTH_TYPE = 0x8C16;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
  /** Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_STENCIL_INDEX16 = 0x8D49;
  /** Part of <code>GL_ARB_framebuffer_sRGB</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_FRAMEBUFFER_SRGB = 0x8DB9;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code>, <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
  /** Part of <code>GL_VERSION_3_0</code>, <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16 = 0x822A;
  /** Part of <code>GL_VERSION_3_0</code>, <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16 = 0x822C;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_SAMPLER_2D_RECT = 0x8B63;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_BUFFER = 0x8DC2;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_2D_RECT = 0x8DCD;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_BUFFER = 0x8DD0;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER = 0x8C2A;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_TEXTURE_RECTANGLE = 0x84F5;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RED_SNORM = 0x8F90;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RG_SNORM = 0x8F91;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGB_SNORM = 0x8F92;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGBA_SNORM = 0x8F93;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_R16_SNORM = 0x8F98;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RG16_SNORM = 0x8F99;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGB16_SNORM = 0x8F9A;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_RGBA16_SNORM = 0x8F9B;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_PRIMITIVE_RESTART = 0x8F9D;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
  /** Part of <code>GL_ARB_cl_event</code> */
  public static final int GL_SYNC_CL_EVENT_ARB = 0x8240;
  /** Part of <code>GL_ARB_cl_event</code> */
  public static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
  /** Part of <code>GL_ARB_compute_shader</code> */
  public static final int GL_COMPUTE_SHADER_BIT = 0x00000020;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINES_ADJACENCY_ARB = 0x000A;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_SHADER_ARB = 0x8DD9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
  /** Part of <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SRGB_DECODE_ARB = 0x8299;
  /** Part of <code>GL_ARB_robustness</code> */
  public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_SHADER_INCLUDE_ARB = 0x8DAE;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
  /** Part of <code>GL_ARB_texture_gather</code> */
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS = 0x8F9F;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
  /** Part of <code>GL_AMD_blend_minmax_factor</code> */
  public static final int GL_FACTOR_MIN_AMD = 0x901C;
  /** Part of <code>GL_AMD_blend_minmax_factor</code> */
  public static final int GL_FACTOR_MAX_AMD = 0x901D;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
  /** Part of <code>GL_AMD_depth_clamp_separate</code> */
  public static final int GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
  /** Part of <code>GL_AMD_depth_clamp_separate</code> */
  public static final int GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
  /** Part of <code>GL_AMD_pinned_memory</code> */
  public static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
  /** Part of <code>GL_AMD_sample_positions</code> */
  public static final int GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_SET_AMD = 0x874A;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_REPLACE_VALUE_AMD = 0x874B;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_STENCIL_OP_VALUE_AMD = 0x874C;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_SAMPLER_BUFFER_AMD = 0x9001;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_TESSELLATION_MODE_AMD = 0x9004;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_TESSELLATION_FACTOR_AMD = 0x9005;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_DISCRETE_AMD = 0x9006;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code> */
  public static final int GL_CONTINUOUS_AMD = 0x9007;
  /** Part of <code>GL_EXT_framebuffer_multisample_blit_scaled</code> */
  public static final int GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
  /** Part of <code>GL_EXT_framebuffer_multisample_blit_scaled</code> */
  public static final int GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_DECODE_EXT = 0x8A49;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_SKIP_DECODE_EXT = 0x8A4A;
  /** Part of <code>GL_EXT_x11_sync_object</code> */
  public static final int GL_SYNC_X11_FENCE_EXT = 0x90E1;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_GPU_ADDRESS_NV = 0x8F34;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
  /** Part of <code>GL_NV_texture_multisample</code> */
  public static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
  /** Part of <code>GL_NV_texture_multisample</code> */
  public static final int GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;

  /** Entry point to C language function: <code> void {@native glBeginConditionalRender}(GLuint id, GLenum mode); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code>   */
  public void glBeginConditionalRender(int id, int mode);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocation}(GLuint program, GLuint color, const GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glBindFragDataLocation(int program, int color, String name);

  /** Entry point to C language function: <code> void {@native glBufferAddressRangeNV}(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glBufferAddressRangeNV(int pname, int index, long address, long length);

  /** Entry point to C language function: <code> void {@native glClampColor}(GLenum target, GLenum clamp); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code>   */
  public void glClampColor(int target, int clamp);

  /** Entry point to C language function: <code> void {@native glClearNamedBufferDataEXT}(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *  data); </code> <br>Part of <code>GL_ARB_clear_buffer_object</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearNamedBufferDataEXT(int buffer, int internalformat, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glClearNamedBufferSubDataEXT}(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void *  data); </code> <br>Part of <code>GL_ARB_clear_buffer_object</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearNamedBufferSubDataEXT(int buffer, int internalformat, int format, int type, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glColorMaski}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glColorMaski(int index, boolean r, boolean g, boolean b, boolean a);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar *  *  path, const GLint *  length); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar *  *  path, const GLint *  length); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCopyTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> GLsync {@native glCreateSyncFromCLeventARB}(cl_context context, cl_event event, GLbitfield flags); </code> <br>Part of <code>GL_ARB_cl_event</code>   */
  public long glCreateSyncFromCLeventARB(long context, long event, int flags);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_AMD_debug_output</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, IntBuffer ids, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, int[] ids, int ids_offset, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageInsertAMD}(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *  buf); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public void glDebugMessageInsertAMD(int category, int severity, int id, int length, String buf);

  /** Entry point to C language function: <code> void {@native glDeleteNamedStringARB}(GLint namelen, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glDeleteNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> void {@native glDisableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_1</code>, <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glDisableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glDisablei}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glDisablei(int target, int index);

  /** Entry point to C language function: <code> void {@native glDrawBuffer}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glEdgeFlagFormatNV}(GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glEdgeFlagFormatNV(int stride);

  /** Entry point to C language function: <code> void {@native glEnableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_1</code>, <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glEnableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glEnablei}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glEnablei(int target, int index);

  /** Entry point to C language function: <code> void {@native glEndConditionalRender}(void); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code>   */
  public void glEndConditionalRender();

  /** Entry point to C language function: <code> void {@native glFogCoordFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glFogCoordFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture1D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>, <code>GL_VERSION_3_0</code>   */
  public void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureARB}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureARB(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureFaceARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureFaceARB(int target, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayerARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureLayerARB(int target, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>, <code>GL_VERSION_3_1</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param uniformName a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, IntBuffer length, ByteBuffer uniformName);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>, <code>GL_VERSION_3_1</code>   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, int[] length, int length_offset, byte[] uniformName, int uniformName_offset);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetBooleani_v(int target, int index, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetBooleani_v(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetBufferParameterui64vNV(int target, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetBufferParameterui64vNV(int target, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferSubData}(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_5</code>
      @param data a direct only {@link java.nio.Buffer}   */
  public void glGetBufferSubData(int target, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTexImage(int target, int level, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glGetCompressedTexImage(int target, int level, long img_buffer_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message); </code> <br>Part of <code>GL_AMD_debug_output</code>
      @param categories a direct or array-backed {@link java.nio.IntBuffer}
      @param severities a direct or array-backed {@link java.nio.IntBuffer}
      @param ids a direct or array-backed {@link java.nio.IntBuffer}
      @param lengths a direct or array-backed {@link java.nio.IntBuffer}
      @param message a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, IntBuffer categories, IntBuffer severities, IntBuffer ids, IntBuffer lengths, ByteBuffer message);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, int[] categories, int categories_offset, int[] severities, int severities_offset, int[] ids, int ids_offset, int[] lengths, int lengths_offset, byte[] message, int message_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublev(int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetDoublev(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64i_vNV(int value, int index, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glGetIntegerui64i_vNV(int value, int index, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64vNV(int value, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetIntegerui64vNV(int value, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferParameterivEXT}(GLuint framebuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedFramebufferParameterivEXT(int framebuffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferParameterivEXT}(GLuint framebuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>   */
  public void glGetNamedFramebufferParameterivEXT(int framebuffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param stringlen a direct or array-backed {@link java.nio.IntBuffer}
      @param string a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, IntBuffer stringlen, ByteBuffer string);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, int[] stringlen, int stringlen_offset, byte[] string, int string_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryObjectiv(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTexImage(int target, int level, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexImage(int target, int level, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glGetTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glGetTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetUniformui64vNV(int program, int location, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetUniformui64vNV(int program, int location, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glGetVertexAttribdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetnCompressedTexImage}(GLenum target, GLint lod, GLsizei bufSize, GLvoid *  img); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnCompressedTexImage(int target, int lod, int bufSize, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetnTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  img); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnTexImage(int target, int level, int format, int type, int bufSize, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetnUniformdv}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetnUniformdv(int program, int location, int bufSize, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformdv}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnUniformdv(int program, int location, int bufSize, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetnUniformuiv}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetnUniformuiv(int program, int location, int bufSize, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformuiv}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnUniformuiv(int program, int location, int bufSize, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLsync {@native glImportSyncEXT}(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags); </code> <br>Part of <code>GL_EXT_x11_sync_object</code>   */
  public long glImportSyncEXT(int external_sync_type, long external_sync, int flags);

  /** Entry point to C language function: <code> void {@native glIndexFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glIndexFormatNV(int type, int stride);

  /** Entry point to C language function: <code> GLboolean {@native glIsBufferResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsBufferResidentNV(int target);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnabledi}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public boolean glIsEnabledi(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedBufferResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsNamedBufferResidentNV(int buffer);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedStringARB}(GLint namelen, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public boolean glIsNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> void {@native glLogicOp}(GLenum opcode); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>, <code>GL_VERSION_1_0</code>   */
  public void glLogicOp(int opcode);

  /** Entry point to C language function: <code> void {@native glMakeBufferNonResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferNonResidentNV(int target);

  /** Entry point to C language function: <code> void {@native glMakeBufferResidentNV}(GLenum target, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferResidentNV(int target, int access);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferNonResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeNamedBufferNonResidentNV(int buffer);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferResidentNV}(GLuint buffer, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeNamedBufferResidentNV(int buffer, int access);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei drawcount); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param first a direct or array-backed {@link java.nio.IntBuffer}
      @param count a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiDrawArrays(int mode, IntBuffer first, IntBuffer count, int drawcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei drawcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawArrays(int mode, int[] first, int first_offset, int[] count, int count_offset, int drawcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirectAMD}(GLenum mode, const GLvoid *  indirect, GLsizei primcount, GLsizei stride); </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawArraysIndirectAMD(int mode, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid * const  *  indices, GLsizei drawcount); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param count a direct only {@link java.nio.IntBuffer}
      @param indices a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElements(int mode, IntBuffer count, int type, PointerBuffer indices, int drawcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirectAMD}(GLenum mode, GLenum type, const GLvoid *  indirect, GLsizei primcount, GLsizei stride); </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirectAMD(int mode, int type, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferParameteriEXT}(GLuint framebuffer, GLenum pname, GLint param); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>   */
  public void glNamedFramebufferParameteriEXT(int framebuffer, int pname, int param);

  /** Entry point to C language function: <code> void {@native glNamedStringARB}(GLenum type, GLint namelen, const GLchar *  name, GLint stringlen, const GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glNamedStringARB(int type, int namelen, String name, int stringlen, String string);

  /** Entry point to C language function: <code> void {@native glNormalFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glNormalFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glPixelStoref}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelStoref(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterf}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_VERSION_ES_CM</code>   */
  public void glPointParameterf(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_VERSION_ES_CM</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPointParameterfv(int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>, <code>GL_VERSION_ES_CM</code>   */
  public void glPointParameterfv(int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointParameteri}(GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteri(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPointParameteriv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteriv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointSize}(GLfloat size); </code> <br>Part of <code>GL_VERSION_1_0</code>, <code>GL_VERSION_ES_CM</code>   */
  public void glPointSize(float size);

  /** Entry point to C language function: <code> void {@native glPolygonMode}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonMode(int face, int mode);

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartIndex}(GLuint index); </code> <br>Part of <code>GL_VERSION_3_1</code>   */
  public void glPrimitiveRestartIndex(int index);

  /** Entry point to C language function: <code> void {@native glProgramParameteriARB}(GLuint program, GLenum pname, GLint value); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glProgramParameteriARB(int program, int pname, int value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64NV}(GLuint program, GLint location, GLuint64EXT value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64NV(int program, int location, long value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glProgramUniformui64vNV(int program, int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64vNV(int program, int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glSecondaryColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val); </code> <br>Part of <code>GL_AMD_sample_positions</code>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glSetMultisamplefvAMD(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val); </code> <br>Part of <code>GL_AMD_sample_positions</code>   */
  public void glSetMultisamplefvAMD(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glStencilOpValueAMD}(GLenum face, GLuint value); </code> <br>Part of <code>GL_AMD_stencil_operation_extended</code>   */
  public void glStencilOpValueAMD(int face, int value);

  /** Entry point to C language function: <code> void {@native glTessellationFactorAMD}(GLfloat factor); </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code>   */
  public void glTessellationFactorAMD(float factor);

  /** Entry point to C language function: <code> void {@native glTessellationModeAMD}(GLenum mode); </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>, <code>GL_AMD_vertex_shader_tessellator</code>   */
  public void glTessellationModeAMD(int mode);

  /** Entry point to C language function: <code> void {@native glTexBuffer}(GLenum target, GLenum internalformat, GLuint buffer); </code> <br>Part of <code>GL_VERSION_3_1</code>; <code>GL_ARB_texture_buffer_object</code>   */
  public void glTexBuffer(int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTexCoordFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glTexCoordFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTextureBufferRangeEXT}(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size); </code> <br>Part of <code>GL_ARB_texture_buffer_range</code>   */
  public void glTextureBufferRangeEXT(int texture, int target, int internalformat, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage2DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage2DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage3DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage3DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glUniformui64NV}(GLint location, GLuint64EXT value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64NV(int location, long value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glUniformui64vNV(int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64vNV(int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexArrayBindVertexBufferEXT}(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayBindVertexBufferEXT(int vaobj, int bindingindex, int buffer, long offset, int stride);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexAttribBindingEXT}(GLuint vaobj, GLuint attribindex, GLuint bindingindex); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayVertexAttribBindingEXT(int vaobj, int attribindex, int bindingindex);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexAttribFormatEXT}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayVertexAttribFormatEXT(int vaobj, int attribindex, int size, int type, boolean normalized, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexAttribIFormatEXT}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayVertexAttribIFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexAttribLFormatEXT}(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayVertexAttribLFormatEXT(int vaobj, int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexArrayVertexBindingDivisorEXT}(GLuint vaobj, GLuint bindingindex, GLuint divisor); </code> <br>Part of <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexArrayVertexBindingDivisorEXT(int vaobj, int bindingindex, int divisor);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1d}(GLuint index, GLdouble x); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1s}(GLuint index, GLshort x); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1s(int index, short x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib1sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2d}(GLuint index, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2s}(GLuint index, GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2s(int index, short x, short y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib2sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3s}(GLuint index, GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3s(int index, short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib3sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nbv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nbv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Niv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Niv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nsv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nsv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nub}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Nuiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nuiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nusv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nusv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4s}(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4s(int index, short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribFormatNV}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribFormatNV(int index, int size, int type, boolean normalized, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1i}(GLuint index, GLint x); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1i(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ui}(GLuint index, GLuint x); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1ui(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2i}(GLuint index, GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2i(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ui}(GLuint index, GLuint x, GLuint y); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2ui(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3i}(GLuint index, GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3i(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ui}(GLuint index, GLuint x, GLuint y, GLuint z); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3ui(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribIFormatNV}(GLuint index, GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribIFormatNV(int index, int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexFormatNV(int size, int type, int stride);


} // end of class GL2GL3
