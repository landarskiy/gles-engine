/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Tue Mar 11 04:18:32 CET 2014 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <p>This interface contains all OpenGL [ 4.0 .. 4.3 ] <i>core</i> methods,
  * as well as most of it's extensions defined at the time of this specification.</p>
  * <p>Note: OpenGL [ 4.0 .. 4.3 ] core profile does not includes fixed point functionality.</p>
  */
public interface GL4 extends GL4ES3, GL3{

  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_sample_shading</code> */
  public static final int GL_SAMPLE_SHADING = 0x8C36;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_sample_shading</code> */
  public static final int GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_gather</code> */
  public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_gather</code> */
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
  /** Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_draw_indirect</code> */
  public static final int GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_draw_indirect</code> */
  public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code> */
  public static final int GL_MAX_VERTEX_STREAMS = 0x8E71;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC2 = 0x8FFC;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC3 = 0x8FFD;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC4 = 0x8FFE;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2 = 0x8F46;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3 = 0x8F47;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4 = 0x8F48;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2x3 = 0x8F49;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2x4 = 0x8F4A;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3x2 = 0x8F4B;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3x4 = 0x8F4C;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4x2 = 0x8F4D;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4x3 = 0x8F4E;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_ACTIVE_SUBROUTINES = 0x8DE5;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_MAX_SUBROUTINES = 0x8DE7;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
  /** Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code> */
  public static final int GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCHES = 0x000E;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_VERTICES = 0x8E72;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_MODE = 0x8E76;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_SPACING = 0x8E77;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_POINT_MODE = 0x8E79;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_ISOLINES = 0x8E7A;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_FRACTIONAL_ODD = 0x8E7B;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_FRACTIONAL_EVEN = 0x8E7C;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_PATCH_VERTICES = 0x8E7D;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_EVALUATION_SHADER = 0x8E87;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_CONTROL_SHADER = 0x8E88;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
  /** Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_GEOMETRY_SHADER_BIT = 0x00000004;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_MAX_VIEWPORTS = 0x825B;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_LAYER_PROVOKING_VERTEX = 0x825E;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
  /** Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code> */
  public static final int GL_UNDEFINED_VERTEX = 0x8260;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_map_buffer_alignment</code> */
  public static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
  /** Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNIFORM_BARRIER_BIT = 0x00000004;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_COMMAND_BARRIER_BIT = 0x00000040;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_IMAGE_UNITS = 0x8F38;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_NAME = 0x8F3A;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_LEVEL = 0x8F3B;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_LAYERED = 0x8F3C;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_LAYER = 0x8F3D;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_ACCESS = 0x8F3E;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_1D = 0x904C;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_2D = 0x904D;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_3D = 0x904E;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_2D_RECT = 0x904F;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_CUBE = 0x9050;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BUFFER = 0x9051;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_1D_ARRAY = 0x9052;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_2D_ARRAY = 0x9053;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_2D_MULTISAMPLE = 0x9055;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_1D = 0x9057;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_2D = 0x9058;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_3D = 0x9059;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_2D_RECT = 0x905A;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_CUBE = 0x905B;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_BUFFER = 0x905C;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_1D_ARRAY = 0x905D;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_2D_ARRAY = 0x905E;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_IMAGE_SAMPLES = 0x906D;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_BINDING_FORMAT = 0x906E;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
  /** Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code> */
  public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
  /** Part of <code>GL_VERSION_4_3</code> */
  public static final int GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
  /** Part of <code>GL_VERSION_4_3</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_COMPUTE_SHADER = 0x91B9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_LOCAL_INVOCATIONS = 0x90EB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_COMPUTE_LOCAL_WORK_SIZE = 0x8267;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code> */
  public static final int GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_KHR_debug</code> */
  public static final int GL_PROGRAM_PIPELINE = 0x82E4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_explicit_uniform_location</code> */
  public static final int GL_MAX_UNIFORM_LOCATIONS = 0x826E;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
  /** Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_SUPPORTED = 0x826F;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_PREFERRED = 0x8270;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_RED_SIZE = 0x8271;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_RED_TYPE = 0x8278;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MAX_WIDTH = 0x827E;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MAX_HEIGHT = 0x827F;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MAX_DEPTH = 0x8280;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MAX_LAYERS = 0x8281;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MAX_COMBINED_DIMENSIONS = 0x8282;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_COLOR_COMPONENTS = 0x8283;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_DEPTH_COMPONENTS = 0x8284;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_STENCIL_COMPONENTS = 0x8285;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_COLOR_RENDERABLE = 0x8286;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_DEPTH_RENDERABLE = 0x8287;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_STENCIL_RENDERABLE = 0x8288;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FRAMEBUFFER_RENDERABLE = 0x8289;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FRAMEBUFFER_BLEND = 0x828B;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_READ_PIXELS = 0x828C;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_READ_PIXELS_FORMAT = 0x828D;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_READ_PIXELS_TYPE = 0x828E;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_IMAGE_FORMAT = 0x828F;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_IMAGE_TYPE = 0x8290;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MIPMAP = 0x8293;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_MANUAL_GENERATE_MIPMAP = 0x8294;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_AUTO_GENERATE_MIPMAP = 0x8295;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_COLOR_ENCODING = 0x8296;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SRGB_READ = 0x8297;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SRGB_WRITE = 0x8298;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FILTER = 0x829A;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VERTEX_TEXTURE = 0x829B;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TESS_CONTROL_TEXTURE = 0x829C;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TESS_EVALUATION_TEXTURE = 0x829D;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_GEOMETRY_TEXTURE = 0x829E;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FRAGMENT_TEXTURE = 0x829F;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_COMPUTE_TEXTURE = 0x82A0;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_SHADOW = 0x82A1;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_GATHER = 0x82A2;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_GATHER_SHADOW = 0x82A3;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SHADER_IMAGE_LOAD = 0x82A4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SHADER_IMAGE_STORE = 0x82A5;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SHADER_IMAGE_ATOMIC = 0x82A6;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_TEXEL_SIZE = 0x82A7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_PIXEL_FORMAT = 0x82A9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_PIXEL_TYPE = 0x82AA;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_CLEAR_BUFFER = 0x82B4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_TEXTURE_VIEW = 0x82B5;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_FULL_SUPPORT = 0x82B7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_CAVEAT_SUPPORT = 0x82B8;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_4_X_32 = 0x82B9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_2_X_32 = 0x82BA;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_1_X_32 = 0x82BB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_4_X_16 = 0x82BC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_2_X_16 = 0x82BD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_1_X_16 = 0x82BE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_4_X_8 = 0x82BF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_2_X_8 = 0x82C0;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_1_X_8 = 0x82C1;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_11_11_10 = 0x82C2;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_128_BITS = 0x82C4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_96_BITS = 0x82C5;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_64_BITS = 0x82C6;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_48_BITS = 0x82C7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_32_BITS = 0x82C8;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_24_BITS = 0x82C9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_16_BITS = 0x82CA;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_8_BITS = 0x82CB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_internalformat_query2</code> */
  public static final int GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_UNIFORM = 0x92E1;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_UNIFORM_BLOCK = 0x92E2;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_PROGRAM_INPUT = 0x92E3;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_PROGRAM_OUTPUT = 0x92E4;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_BUFFER_VARIABLE = 0x92E5;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_SHADER_STORAGE_BLOCK = 0x92E6;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_VERTEX_SUBROUTINE = 0x92E8;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_GEOMETRY_SUBROUTINE = 0x92EB;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAGMENT_SUBROUTINE = 0x92EC;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_COMPUTE_SUBROUTINE = 0x92ED;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_ACTIVE_RESOURCES = 0x92F5;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_NAME_LENGTH = 0x92F6;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_NAME_LENGTH = 0x92F9;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TYPE = 0x92FA;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_ARRAY_SIZE = 0x92FB;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_OFFSET = 0x92FC;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_BLOCK_INDEX = 0x92FD;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_ARRAY_STRIDE = 0x92FE;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_MATRIX_STRIDE = 0x92FF;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_IS_ROW_MAJOR = 0x9300;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_BUFFER_BINDING = 0x9302;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_BUFFER_DATA_SIZE = 0x9303;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_NUM_ACTIVE_VARIABLES = 0x9304;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_ACTIVE_VARIABLES = 0x9305;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_LOCATION = 0x930E;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_LOCATION_INDEX = 0x930F;
  /** Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_IS_PER_PATCH = 0x92E7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BUFFER = 0x90D2;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code> */
  public static final int GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_stencil_texturing</code> */
  public static final int GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
  /** Part of <code>GL_ARB_texture_buffer_range</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TEXTURE_BUFFER_OFFSET = 0x919D;
  /** Part of <code>GL_ARB_texture_buffer_range</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TEXTURE_BUFFER_SIZE = 0x919E;
  /** Part of <code>GL_ARB_texture_buffer_range</code>, <code>GL_VERSION_4_3</code> */
  public static final int GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code> */
  public static final int GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code> */
  public static final int GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code> */
  public static final int GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code> */
  public static final int GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_VERTEX_ATTRIB_BINDING = 0x82D4;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_VERTEX_BINDING_DIVISOR = 0x82D6;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_VERTEX_BINDING_OFFSET = 0x82D7;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_VERTEX_BINDING_STRIDE = 0x82D8;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
  /** Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code> */
  public static final int GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;

  /** Entry point to C language function: <code> void {@native glActiveShaderProgram}(GLuint pipeline, GLuint program); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glActiveShaderProgram(int pipeline, int program);

  /** Entry point to C language function: <code> void {@native glBeginQueryIndexed}(GLenum target, GLuint index, GLuint id); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code>   */
  public void glBeginQueryIndexed(int target, int index, int id);

  /** Entry point to C language function: <code> void {@native glBindImageTexture}(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format); </code> <br>Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>   */
  public void glBindImageTexture(int unit, int texture, int level, boolean layered, int layer, int access, int format);

  /** Entry point to C language function: <code> void {@native glBindProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glBindProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glBindVertexBuffer}(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glBindVertexBuffer(int bindingindex, int buffer, long offset, int stride);

  /** Entry point to C language function: <code> void {@native glBlendEquationSeparatei}(GLuint buf, GLenum modeRGB, GLenum modeAlpha); </code> <br>Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glBlendEquationi}(GLuint buf, GLenum mode); </code> <br>Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendEquationi(int buf, int mode);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparatei}(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha); </code> <br>Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFunci}(GLuint buf, GLenum src, GLenum dst); </code> <br>Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendFunci(int buf, int src, int dst);

  /** Entry point to C language function: <code> void {@native glClearBufferData}(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *  data); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_clear_buffer_object</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearBufferData(int target, int internalformat, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glClearBufferSubData}(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *  data); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_clear_buffer_object</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glClearBufferSubData(int target, int internalformat, long offset, long size, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glCopyImageSubData}(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth); </code> <br>Part of <code>GL_ARB_copy_image</code>, <code>GL_VERSION_4_3</code>   */
  public void glCopyImageSubData(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);

  /** Entry point to C language function: <code> GLuint {@native glCreateShaderProgramv}(GLenum type, GLsizei count, const GLchar * const  *  strings); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public int glCreateShaderProgramv(int type, int count, String[] strings);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glDeleteProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glDepthRangeArrayv(int first, int count, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glDepthRangeArrayv(int first, int count, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeIndexed}(GLuint index, GLdouble n, GLdouble f); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glDepthRangeIndexed(int index, double n, double f);

  /** Entry point to C language function: <code> void {@native glDispatchCompute}(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code>   */
  public void glDispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z);

  /** Entry point to C language function: <code> void {@native glDispatchComputeIndirect}(GLintptr indirect); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_compute_shader</code>   */
  public void glDispatchComputeIndirect(long indirect);

  /** Entry point to C language function: <code> void {@native glDrawArraysIndirect}(GLenum mode, const GLvoid *  indirect); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_draw_indirect</code>   */
  public void glDrawArraysIndirect(int mode, long indirect_buffer_offset);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedBaseInstance}(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_base_instance</code>   */
  public void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int instancecount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawElementsIndirect}(GLenum mode, GLenum type, const GLvoid *  indirect); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_draw_indirect</code>   */
  public void glDrawElementsIndirect(int mode, int type, long indirect_buffer_offset);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLuint baseinstance); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_base_instance</code>   */
  public void glDrawElementsInstancedBaseInstance(int mode, int count, int type, long indices_buffer_offset, int instancecount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertexBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_base_instance</code>   */
  public void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, long indices_buffer_offset, int instancecount, int basevertex, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedback}(GLenum mode, GLuint id); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback2</code>   */
  public void glDrawTransformFeedback(int mode, int id);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackInstanced}(GLenum mode, GLuint id, GLsizei instancecount); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_transform_feedback_instanced</code>   */
  public void glDrawTransformFeedbackInstanced(int mode, int id, int instancecount);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStream}(GLenum mode, GLuint id, GLuint stream); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code>   */
  public void glDrawTransformFeedbackStream(int mode, int id, int stream);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStreamInstanced}(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_transform_feedback_instanced</code>   */
  public void glDrawTransformFeedbackStreamInstanced(int mode, int id, int stream, int instancecount);

  /** Entry point to C language function: <code> void {@native glEndQueryIndexed}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code>   */
  public void glEndQueryIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glFramebufferParameteri}(GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code>   */
  public void glFramebufferParameteri(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glGenProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_2</code>, <code>GL_ARB_shader_atomic_counters</code>   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param data a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublei_v(int target, int index, DoubleBuffer data);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glGetDoublei_v(int target, int index, double[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetFloati_v(int target, int index, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glGetFloati_v(int target, int index, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFramebufferParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_framebuffer_no_attachments</code>, <code>GL_VERSION_4_3</code>   */
  public void glGetFramebufferParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetInternalformati64v}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *  params); </code> <br>Part of <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_2</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInternalformati64v}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *  params); </code> <br>Part of <code>GL_ARB_internalformat_query2</code>, <code>GL_VERSION_4_2</code>   */
  public void glGetInternalformati64v(int target, int internalformat, int pname, int bufSize, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramInterfaceiv}(GLuint program, GLenum programInterface, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramInterfaceiv(int program, int programInterface, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramInterfaceiv}(GLuint program, GLenum programInterface, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public void glGetProgramInterfaceiv(int program, int programInterface, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramPipelineiv(int pipeline, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glGetProgramPipelineiv(int pipeline, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetProgramResourceIndex}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetProgramResourceIndex(int program, int programInterface, ByteBuffer name);

  /** Entry point to C language function: <code> GLuint {@native glGetProgramResourceIndex}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public int glGetProgramResourceIndex(int program, int programInterface, byte[] name, int name_offset);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocation}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetProgramResourceLocation(int program, int programInterface, ByteBuffer name);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocation}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public int glGetProgramResourceLocation(int program, int programInterface, byte[] name, int name_offset);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndex}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetProgramResourceLocationIndex(int program, int programInterface, ByteBuffer name);

  /** Entry point to C language function: <code> GLint {@native glGetProgramResourceLocationIndex}(GLuint program, GLenum programInterface, const GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public int glGetProgramResourceLocationIndex(int program, int programInterface, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramResourceName}(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetProgramResourceName(int program, int programInterface, int index, int bufSize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetProgramResourceName}(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public void glGetProgramResourceName(int program, int programInterface, int index, int bufSize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramResourceiv}(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *  props, GLsizei bufSize, GLsizei *  length, GLint *  params); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>
      @param props a direct or array-backed {@link java.nio.IntBuffer}
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramResourceiv(int program, int programInterface, int index, int propCount, IntBuffer props, int bufSize, IntBuffer length, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramResourceiv}(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *  props, GLsizei bufSize, GLsizei *  length, GLint *  params); </code> <br>Part of <code>GL_ARB_program_interface_query</code>, <code>GL_VERSION_4_3</code>   */
  public void glGetProgramResourceiv(int program, int programInterface, int index, int propCount, int[] props, int props_offset, int bufSize, int[] length, int length_offset, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryIndexediv(int target, int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_transform_feedback3</code>   */
  public void glGetQueryIndexediv(int target, int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetSubroutineIndex}(GLuint program, GLenum shadertype, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public int glGetSubroutineIndex(int program, int shadertype, String name);

  /** Entry point to C language function: <code> GLint {@native glGetSubroutineUniformLocation}(GLuint program, GLenum shadertype, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public int glGetSubroutineUniformLocation(int program, int shadertype, String name);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetUniformdv(int program, int location, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glGetUniformdv(int program, int location, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribLdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glGetVertexAttribLdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glInvalidateBufferData}(GLuint buffer); </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code>   */
  public void glInvalidateBufferData(int buffer);

  /** Entry point to C language function: <code> void {@native glInvalidateBufferSubData}(GLuint buffer, GLintptr offset, GLsizeiptr length); </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code>   */
  public void glInvalidateBufferSubData(int buffer, long offset, long length);

  /** Entry point to C language function: <code> void {@native glInvalidateTexImage}(GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code>   */
  public void glInvalidateTexImage(int texture, int level);

  /** Entry point to C language function: <code> void {@native glInvalidateTexSubImage}(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth); </code> <br>Part of <code>GL_ARB_invalidate_subdata</code>, <code>GL_VERSION_4_3</code>   */
  public void glInvalidateTexSubImage(int texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public boolean glIsProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glMemoryBarrier}(GLbitfield barriers); </code> <br>Part of <code>GL_ARB_shader_image_load_store</code>, <code>GL_VERSION_4_2</code>   */
  public void glMemoryBarrier(int barriers);

  /** Entry point to C language function: <code> void {@native glMinSampleShading}(GLfloat value); </code> <br>Part of <code>GL_VERSION_4_0</code>; <code>GL_ARB_sample_shading</code>   */
  public void glMinSampleShading(float value);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirect}(GLenum mode, const void *  indirect, GLsizei drawcount, GLsizei stride); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_multi_draw_indirect</code>   */
  public void glMultiDrawArraysIndirect(int mode, long indirect_buffer_offset, int drawcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirect}(GLenum mode, GLenum type, const void *  indirect, GLsizei drawcount, GLsizei stride); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_multi_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirect(int mode, int type, Buffer indirect, int drawcount, int stride);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPatchParameterfv(int pname, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code>   */
  public void glPatchParameterfv(int pname, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPatchParameteri}(GLenum pname, GLint value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_tessellation_shader</code>   */
  public void glPatchParameteri(int pname, int value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1d}(GLuint program, GLint location, GLdouble v0); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform1d(int program, int location, double v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform1dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform1dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1f}(GLuint program, GLint location, GLfloat v0); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform1f(int program, int location, float v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform1fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform1fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1i}(GLuint program, GLint location, GLint v0); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform1i(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform1iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ui}(GLuint program, GLint location, GLuint v0); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1ui(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2d}(GLuint program, GLint location, GLdouble v0, GLdouble v1); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform2d(int program, int location, double v0, double v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform2dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform2dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2f}(GLuint program, GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform2f(int program, int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform2fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform2fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2i}(GLuint program, GLint location, GLint v0, GLint v1); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform2i(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform2iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ui}(GLuint program, GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2ui(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform3d(int program, int location, double v0, double v1, double v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform3dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform3dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform3f(int program, int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform3fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform3fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform3i(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform3iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3ui(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform4d(int program, int location, double v0, double v1, double v2, double v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform4dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniform4dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform4f(int program, int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform4fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform4fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform4i(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniform4iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4ui(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_EXT_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_direct_state_access</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorArrayv(int first, int count, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glScissorArrayv(int first, int count, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorIndexed}(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glScissorIndexed(int index, int left, int bottom, int width, int height);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorIndexedv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glScissorIndexedv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glShaderStorageBlockBinding}(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_shader_storage_buffer_object</code>   */
  public void glShaderStorageBlockBinding(int program, int storageBlockIndex, int storageBlockBinding);

  /** Entry point to C language function: <code> void {@native glTexBufferRange}(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size); </code> <br>Part of <code>GL_ARB_texture_buffer_range</code>, <code>GL_VERSION_4_3</code>   */
  public void glTexBufferRange(int target, int internalformat, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glTexStorage2DMultisample}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_storage_multisample</code>   */
  public void glTexStorage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexStorage3DMultisample}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_storage_multisample</code>   */
  public void glTexStorage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureStorage2DMultisampleEXT}(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_storage_multisample</code>   */
  public void glTextureStorage2DMultisampleEXT(int texture, int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureStorage3DMultisampleEXT}(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_storage_multisample</code>   */
  public void glTextureStorage3DMultisampleEXT(int texture, int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTextureView}(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_texture_view</code>   */
  public void glTextureView(int texture, int target, int origtexture, int internalformat, int minlevel, int numlevels, int minlayer, int numlayers);

  /** Entry point to C language function: <code> void {@native glUniform1d}(GLint location, GLdouble x); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform1d(int location, double x);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform1dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform1dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2d}(GLint location, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform2d(int location, double x, double y);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform2dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform2dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3d}(GLint location, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform3d(int location, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform3dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform3dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4d}(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform4d(int location, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform4dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform4dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_VERSION_4_0</code>, <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>
      @param indices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniformSubroutinesuiv(int shadertype, int count, IntBuffer indices);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>, <code>GL_VERSION_4_0</code>   */
  public void glUniformSubroutinesuiv(int shadertype, int count, int[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glUseProgramStages}(GLuint pipeline, GLbitfield stages, GLuint program); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glUseProgramStages(int pipeline, int stages, int program);

  /** Entry point to C language function: <code> void {@native glValidateProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_separate_shader_objects</code>; <code>GL_EXT_separate_shader_objects</code>   */
  public void glValidateProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glVertexAttribBinding}(GLuint attribindex, GLuint bindingindex); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexAttribBinding(int attribindex, int bindingindex);

  /** Entry point to C language function: <code> void {@native glVertexAttribFormat}(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexAttribFormat(int attribindex, int size, int type, boolean normalized, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexAttribIFormat}(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexAttribIFormat(int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1d}(GLuint index, GLdouble x); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2d}(GLuint index, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribLFormat}(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexAttribLFormat(int attribindex, int size, int type, int relativeoffset);

  /** Entry point to C language function: <code> void {@native glVertexAttribLPointer}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribLPointer(int index, int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVertexBindingDivisor}(GLuint bindingindex, GLuint divisor); </code> <br>Part of <code>GL_VERSION_4_3</code>, <code>GL_ARB_vertex_attrib_binding</code>   */
  public void glVertexBindingDivisor(int bindingindex, int divisor);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportArrayv(int first, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glViewportArrayv(int first, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glViewportIndexedf}(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glViewportIndexedf(int index, float x, float y, float w, float h);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportIndexedfv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_4_1</code>, <code>GL_ARB_viewport_array</code>   */
  public void glViewportIndexedfv(int index, float[] v, int v_offset);


} // end of class GL4
